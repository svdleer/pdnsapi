openapi: 3.0.3
info:
  title: PDNSAdmin PHP API
  description: |
    PHP API wrapper for PDNSAdmin with local database storage and extended functionality.
    
    ## Authentication
    This API uses **Basic Authentication** with base64 encoded credentials.
    Use the `Authorization: Basic <base64-credentials>` header for all authenticated requests.
    
    ## Features
    - **User management** with automatic PowerDNS Admin synchronization
    - **IP address storage** for accounts (local database only)
    - **Domain management** with PDNSAdmin synchronization
    - **Real-time sync** from PowerDNS Admin API
    - **Local database caching** for performance and extended metadata
    - **HTTP standards compliant** interface (GET uses query params, POST/PUT/DELETE use JSON)
  version: 1.0.3
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://dnsadmin.avant.nl/api/v1
    description: Production server (PowerDNS Admin API)

security:
  - BasicAuth: []

paths:
  /:
    get:
      summary: API Documentation
      description: Returns API documentation and available endpoints
      tags:
        - Documentation
      security: []  # No authentication required
      responses:
        '200':
          description: API documentation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDocumentation'

  /accounts:
    get:
      summary: Get all users/accounts (synced from PowerDNS Admin)
      description: |
        Retrieve users/accounts with automatic synchronization from PowerDNS Admin.
        **Working Endpoint**: `/api/v1/pdnsadmin/users` - 47 users available
        
        **Access Patterns:**
        - `GET /accounts` - Get all users/accounts
        - `GET /accounts?id=94` - Get account by ID
        - `GET /accounts?username=johndoe` - Get account by username  
        - `GET /accounts?sync=true` - Force sync from PowerDNS Admin and return all users
        
        **Query Parameters:**
        Use query parameters to filter results or trigger sync operations.
      tags:
        - Accounts
      parameters:
        - name: id
          in: query
          schema:
            type: integer
          description: Get account by ID
          example: 94
        - name: username
          in: query
          schema:
            type: string
          description: Get account by username
          example: "johndoe"
        - name: sync
          in: query
          schema:
            type: boolean
          description: Set to true to sync accounts from PowerDNS Admin before returning results
          example: true
      responses:
        '200':
          description: List of users/accounts or single account
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Account'
                  message:
                    type: string
                    example: "Users retrieved successfully (47 users available)"
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create a new account
      description: Create a new account with optional IP addresses. The account is created in both PDNSAdmin and local database.
      tags:
        - Accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreate'
            examples:
              powerdns_admin_user:
                summary: PowerDNS Admin User Creation
                value:
                  username: "testuser1754424578"
                  plain_text_password: "36440b7d5ab7521f"
                  firstname: "Test"
                  lastname: "User"
                  email: "test@example.com"
                  role:
                    id: 2
                    name: "User"
                  ip_addresses: ["192.168.1.101", "192.168.1.102", "2001:db8::2"]
                  customer_id: 1001
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: Update account
      description: |
        Update an existing account using JSON input. Changes are synced with PDNSAdmin (except IP addresses).
        
        **JSON Payload (Required):**
        - Include account identifier (`id` or `username`)
        - Include fields to update
        - IP addresses are stored locally only
      tags:
        - Accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdateRequest'
            examples:
              update_by_id:
                summary: Update account by ID
                value:
                  id: 94
                  firstname: "Updated First Name"
                  lastname: "Updated Last Name"
                  email: "updated@example.com"
                  ip_addresses: ["192.168.1.101", "192.168.1.102"]
              update_by_username:
                summary: Update account by username
                value:
                  username: "johndoe"
                  customer_id: 1001
                  ip_addresses: ["192.168.1.200", "2001:db8::5"]
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete account
      description: |
        Delete an account from PowerDNS Admin using JSON input. The local database is automatically synced after deletion.
        
        **JSON Payload (Required):**
        - Use `{"id": 94}` to delete account by ID
        - Use `{"username": "johndoe"}` to delete account by username
        
        **Important:** This operation only deletes from PowerDNS Admin. The local database is updated through 
        automatic synchronization, ensuring the API remains the authoritative source for account management.
      tags:
        - Accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountIdentifier'
            examples:
              delete_by_id:
                summary: Delete account by ID
                value:
                  id: 94
              delete_by_username:
                summary: Delete account by username
                value:
                  username: "johndoe"
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /domains:
    get:
      summary: Get all domains/zones (synced from PowerDNS Admin)
      description: |
        Retrieve domains/zones with automatic synchronization from PowerDNS Admin.
        **Working Endpoint**: `/api/v1/pdnsadmin/zones` - 621 zones available
        
        **Access Patterns:**
        - `GET /domains` - Get all domains/zones
        - `GET /domains` with JSON payload `{"id": 123}` - Get domain by ID
        - `GET /domains` with JSON payload `{"account_id": 1}` - Get domains by account
        - `GET /domains?account_id=1` - Get domains by account (query parameter, legacy)
        
        **JSON Payload (Optional):**
        Send JSON in request body to filter results:
        ```json
        {"id": 123}
        // or
        {"account_id": 1}
        ```
      tags:
        - Domains
      parameters:
        - name: sync
          in: query
          schema:
            type: boolean
          description: Set to true to sync domains from PDNSAdmin before returning results
        - name: account_id
          in: query
          schema:
            type: integer
          description: Filter domains by account ID (legacy, prefer JSON payload)
      requestBody:
        required: false
        description: Optional JSON payload to filter results
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required: [id]
                  properties:
                    id:
                      type: integer
                      description: Domain ID
                      example: 123
                  additionalProperties: false
                - type: object
                  required: [account_id]
                  properties:
                    account_id:
                      type: integer
                      description: Account ID
                      example: 1
                  additionalProperties: false
            examples:
              get_by_id:
                summary: Get domain by ID
                value:
                  id: 123
              get_by_account:
                summary: Get domains by account
                value:
                  account_id: 1
      responses:
        '200':
          description: List of domains/zones
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Domain'
                  message:
                    type: string
                    example: "Domains retrieved successfully (621 zones available)"

    put:
      summary: Update domain
      description: |
        Update an existing domain using JSON input. If account_id is changed, 
        the domain assignment is automatically updated in PDNSAdmin.
        
        **JSON Payload:**
        - Include domain identifier (`id`)
        - Include fields to update
      tags:
        - Domains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  required: [id]
                  properties:
                    id:
                      type: integer
                      description: Domain ID
                      example: 123
                - $ref: '#/components/schemas/DomainUpdate'
            examples:
              change_account:
                summary: Change domain account
                value:
                  id: 123
                  account_id: 2
              remove_account:
                summary: Remove from account
                value:
                  id: 123
                  account_id: null
              update_settings:
                summary: Update domain settings
                value:
                  id: 123
                  kind: "Slave"
                  masters: ["192.168.1.100"]
      responses:
        '200':
          description: Domain updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Add domain to account
      description: |
        Add a domain to a specific account. This operation uses direct API calls
        to assign domains to accounts in PowerDNS Admin.
        
        **JSON Payload:**
        - `domain_name`: Domain name to assign (required)
        - `account_id`: Target account ID (required)
      tags:
        - Domains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [domain_name, account_id]
              properties:
                domain_name:
                  type: string
                  description: Domain name to add (include trailing dot)
                  example: "example.com."
                account_id:
                  type: integer
                  description: Account ID to assign domain to
                  example: 1
            examples:
              add_domain_to_account:
                summary: Add domain to account
                value:
                  domain_name: "example.com."
                  account_id: 1
      responses:
        '200':
          description: Domain added to account successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /domains/{id}:
    get:
      summary: Get individual domain by ID
      description: |
        Retrieve a specific domain by its ID from the local database.
      tags:
        - Domains
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Domain ID
          example: 123
      responses:
        '200':
          description: Domain details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Domain'
                  message:
                    type: string
                    example: "Domain retrieved successfully"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    
    put:
      summary: Update domain by ID (path parameter)
      description: |
        Update a specific domain using path parameter for ID.
        Alternative to PUT /domains with JSON payload.
      tags:
        - Domains
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Domain ID
          example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainUpdate'
            examples:
              change_account:
                summary: Change domain account
                value:
                  account_id: 2
              update_settings:
                summary: Update domain settings
                value:
                  kind: "Slave"
                  masters: ["192.168.1.100"]
                  dnssec: true
      responses:
        '200':
          description: Domain updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete domain by ID
      description: |
        Delete a domain from both local database and PowerDNS Admin.
        **Warning**: This action cannot be undone.
      tags:
        - Domains
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Domain ID
          example: 123
      responses:
        '200':
          description: Domain deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /templates:
    get:
      summary: Get all domain templates
      description: |
        Retrieve all available domain templates from PowerDNS Admin.
        Templates can be used to create domains with predefined settings.
      tags:
        - Templates
      responses:
        '200':
          description: List of domain templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Template'
                  message:
                    type: string
                    example: "Templates retrieved successfully"
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create new domain template
      description: |
        Create a new domain template in PowerDNS Admin.
      tags:
        - Templates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateCreate'
      responses:
        '201':
          description: Template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /templates/{id}:
    get:
      summary: Get template by ID
      description: |
        Retrieve a specific domain template by its ID.
      tags:
        - Templates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Template ID
          example: 1
      responses:
        '200':
          description: Template details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Template'
                  message:
                    type: string
                    example: "Template retrieved successfully"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: Update template
      description: |
        Update an existing domain template.
      tags:
        - Templates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Template ID
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateUpdate'
      responses:
        '200':
          description: Template updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete template
      description: |
        Delete a domain template from PowerDNS Admin.
        **Warning**: This action cannot be undone.
      tags:
        - Templates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Template ID
          example: 1
      responses:
        '200':
          description: Template deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /templates/{id}/create-domain:
    post:
      summary: Create domain from template
      description: |
        Create a new domain using a predefined template.
        The template will be applied to set up the domain with default records and settings.
      tags:
        - Templates
        - Domains
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Template ID
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  description: Domain name to create
                  example: "example.com"
                account_id:
                  type: integer
                  description: Account ID to assign the domain to
                  example: 1
                description:
                  type: string
                  description: Optional description for the domain
                  example: "Production domain for example.com"
      responses:
        '201':
          description: Domain created from template successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Domain'
                  message:
                    type: string
                    example: "Domain created from template successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /domain-account:
    post:
      summary: Domain-Account operations
      description: Perform operations to manage domain-account relationships
      tags:
        - Domain-Account
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum: [add, remove, list]
          description: Action to perform (add, remove, list)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/DomainAccountAdd'
                - $ref: '#/components/schemas/DomainAccountRemove'
                - $ref: '#/components/schemas/DomainAccountList'
            examples:
              add_domain:
                summary: Add domain to account
                value:
                  domain_name: "example.com."
                  account_id: 1
              remove_domain:
                summary: Remove domain from account
                value:
                  domain_name: "example.com."
              list_domains:
                summary: List account domains
                value:
                  account_id: 1
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SuccessMessage'
                  - $ref: '#/components/schemas/AccountDomainsList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /status:
    get:
      summary: API status
      description: Get API status and health information
      tags:
        - Status
      parameters:
        - name: action
          in: query
          schema:
            type: string
            enum: [test_connection, sync_all, health]
          description: Specific action to perform
      responses:
        '200':
          description: Status information
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ApiStatus'
                  - $ref: '#/components/schemas/ConnectionTest'
                  - $ref: '#/components/schemas/SyncResult'
                  - $ref: '#/components/schemas/HealthCheck'

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      description: |
        Basic Authentication using base64 encoded credentials.
        
        **Format:** `Authorization: Basic <base64-encoded-credentials>`
        
        **Example:** 
        ```
        Authorization: Basic YWRtaW46YWRtaW4=
        ```
        
        **Note:** The credentials should be base64 encoded before sending the request.
      
  schemas:
    Account:
      type: object
      properties:
        id:
          type: integer
          description: Account ID
          example: 1
        username:
          type: string
          description: Username (unique)
          example: "testuser"
        firstname:
          type: string
          description: First name
          example: "John"
        lastname:
          type: string
          description: Last name
          example: "Doe"
        email:
          type: string
          format: email
          description: Email address
          example: "john@example.com"
        role_id:
          type: integer
          description: Role ID (2 = User, 1 = Admin)
          example: 2
        ip_addresses:
          type: array
          items:
            type: string
            format: ipv4 | ipv6
          description: List of IP addresses (IPv4/IPv6, local storage only)
          example: ["192.168.1.100", "2001:db8::1"]
        customer_id:
          type: integer
          description: Customer ID for business relationships
          example: 1001
        pdns_account_id:
          type: integer
          nullable: true
          description: PowerDNS Admin account ID (synced from PowerDNS Admin)
          example: 12
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    AccountCreate:
      type: object
      required:
        - username
        - plain_text_password
        - firstname  
        - email
      properties:
        username:
          type: string
          description: Username for PowerDNS Admin (must be unique)
          example: "testuser1754424578"
        plain_text_password:
          type: string
          description: Plain text password for PowerDNS Admin user
          example: "36440b7d5ab7521f"
        firstname:
          type: string
          description: First name
          example: "Test"
        lastname:
          type: string
          description: Last name
          example: "User"
        email:
          type: string
          format: email
          description: Email address
          example: "test@example.com"
        role:
          type: object
          description: User role object
          properties:
            id:
              type: integer
              description: Role ID (2 = User, 1 = Admin)
              example: 2
            name:
              type: string
              description: Role name
              example: "User"
          required:
            - id
            - name
        ip_addresses:
          type: array
          items:
            type: string
            format: ipv4 | ipv6
          description: List of IP addresses (IPv4/IPv6, local storage only)
          example: ["192.168.1.100", "2001:db8::1"]
        customer_id:
          type: integer
          description: Customer ID for business relationships
          example: 1001

    AccountIdentifier:
      type: object
      oneOf:
        - type: object
          required: [id]
          properties:
            id:
              type: integer
              description: Account ID
              example: 94
          additionalProperties: false
        - type: object
          required: [username]
          properties:
            username:
              type: string
              description: Account username
              example: "johndoe"
          additionalProperties: false
      description: Account identifier object (either ID or username, not both)

    AccountUpdateRequest:
      type: object
      oneOf:
        - allOf:
          - type: object
            required: [id]
            properties:
              id:
                type: integer
                description: Account ID
                example: 94
          - $ref: '#/components/schemas/AccountUpdate'
        - allOf:
          - type: object
            required: [username]
            properties:
              username:
                type: string
                description: Account username
                example: "johndoe"
          - $ref: '#/components/schemas/AccountUpdate'
      description: Account update request with identifier and update fields

    AccountUpdate:
      type: object
      properties:
        firstname:
          type: string
          description: First name
        lastname:
          type: string
          description: Last name
        email:
          type: string
          format: email
          description: Email address
        role_id:
          type: integer
          description: Role ID
        ip_addresses:
          type: array
          items:
            type: string
            format: ipv4 | ipv6
          description: List of IP addresses (IPv4/IPv6)
        customer_id:
          type: integer
          nullable: true
          description: Customer ID

    Domain:
      type: object
      properties:
        id:
          type: integer
          description: Domain ID
          example: 1
        name:
          type: string
          description: Domain name
          example: "example.com."
        type:
          type: string
          description: Domain type
          example: "Zone"
        account_id:
          type: integer
          nullable: true
          description: Associated account ID
          example: 1
        account_name:
          type: string
          nullable: true
          description: Associated account name
          example: "customer-account"
        pdns_zone_id:
          type: string
          description: PDNSAdmin zone ID
          example: "example.com."
        kind:
          type: string
          enum: [Native, Master, Slave]
          description: Zone kind
          example: "Master"
        masters:
          type: string
          description: Comma-separated list of master servers
          example: "192.168.1.100,192.168.1.101"
        dnssec:
          type: boolean
          description: DNSSEC enabled
          example: false
        account:
          type: string
          description: Account name from PDNSAdmin
          example: "customer-account"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    DomainUpdate:
      type: object
      properties:
        account_id:
          type: integer
          nullable: true
          description: Account ID to assign domain to (null to remove)
        kind:
          type: string
          enum: [Native, Master, Slave]
          description: Zone kind
        masters:
          type: array
          items:
            type: string
          description: List of master servers
        dnssec:
          type: boolean
          description: Enable DNSSEC

    DomainAccountAdd:
      type: object
      required:
        - domain_name
        - account_id
      properties:
        domain_name:
          type: string
          description: Domain name to add to account
          example: "example.com."
        account_id:
          type: integer
          description: Account ID
          example: 1

    DomainAccountRemove:
      type: object
      required:
        - domain_name
      properties:
        domain_name:
          type: string
          description: Domain name to remove from account
          example: "example.com."

    DomainAccountList:
      type: object
      required:
        - account_id
      properties:
        account_id:
          type: integer
          description: Account ID to list domains for
          example: 1

    AccountDomainsList:
      type: object
      properties:
        data:
          type: object
          properties:
            account:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
            domains:
              type: array
              items:
                $ref: '#/components/schemas/Domain'
            domain_count:
              type: integer
        message:
          type: string

    ApiStatus:
      type: object
      properties:
        data:
          type: object
          properties:
            api_version:
              type: string
              example: "1.0.0"
            timestamp:
              type: string
              format: date-time
            endpoints:
              type: object
              additionalProperties:
                type: string
              example:
                accounts: "/api/accounts"
                domains: "/api/domains"
                status: "/api/status"
            pdns_admin_status:
              type: string
              enum: [connected, disconnected]
            database_status:
              type: string
              enum: [connected, disconnected]
        message:
          type: string

    ConnectionTest:
      type: object
      properties:
        data:
          type: object
          properties:
            status:
              type: string
              enum: [connected, disconnected]
            pdns_domains_count:
              type: integer
        message:
          type: string

    SyncResult:
      type: object
      properties:
        data:
          type: object
          properties:
            accounts:
              type: object
              properties:
                status:
                  type: string
                count:
                  type: integer
            domains:
              type: object
              properties:
                status:
                  type: string
                count:
                  type: integer
        message:
          type: string

    HealthCheck:
      type: object
      properties:
        data:
          type: object
          properties:
            database:
              type: string
              enum: [connected, disconnected, unknown]
            timestamp:
              type: string
              format: date-time
            version:
              type: string
            local_accounts_count:
              type: integer
            local_domains_count:
              type: integer
        message:
          type: string

    ApiDocumentation:
      type: object
      properties:
        data:
          type: object
          properties:
            name:
              type: string
            version:
              type: string
            description:
              type: string
            endpoints:
              type: object
              additionalProperties:
                type: string
              example:
                accounts: "/api/accounts"
                domains: "/api/domains"
                status: "/api/status"
            setup_instructions:
              type: array
              items:
                type: string
        message:
          type: string

    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          example: "Operation completed successfully"

    Template:
      type: object
      properties:
        id:
          type: integer
          description: Template ID
          example: 1
        name:
          type: string
          description: Template name
          example: "Standard Web Server"
        description:
          type: string
          description: Template description
          example: "Standard template for web server domains"
        records:
          type: array
          items:
            $ref: '#/components/schemas/TemplateRecord'
          description: Template records
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    TemplateCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Template name
          example: "Standard Web Server"
        description:
          type: string
          description: Template description
          example: "Standard template for web server domains"
        records:
          type: array
          items:
            $ref: '#/components/schemas/TemplateRecordCreate'
          description: Template records to create

    TemplateUpdate:
      type: object
      properties:
        name:
          type: string
          description: Template name
        description:
          type: string
          description: Template description
        records:
          type: array
          items:
            $ref: '#/components/schemas/TemplateRecordCreate'
          description: Template records

    TemplateRecord:
      type: object
      properties:
        id:
          type: integer
          description: Record ID
          example: 1
        name:
          type: string
          description: Record name
          example: "www"
        type:
          type: string
          description: Record type
          example: "A"
        content:
          type: string
          description: Record content
          example: "192.168.1.100"
        ttl:
          type: integer
          description: Time to live
          example: 3600
        priority:
          type: integer
          description: Record priority (for MX records)
          example: 10

    TemplateRecordCreate:
      type: object
      required:
        - name
        - type
        - content
      properties:
        name:
          type: string
          description: Record name
          example: "www"
        type:
          type: string
          enum: [A, AAAA, CNAME, MX, TXT, NS, PTR, SRV]
          description: Record type
          example: "A"
        content:
          type: string
          description: Record content
          example: "192.168.1.100"
        ttl:
          type: integer
          description: Time to live, default 3600
          example: 3600
        priority:
          type: integer
          description: Record priority (for MX records)
          example: 10

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid request data"
        errors:
          type: array
          items:
            type: string
          description: Detailed error messages

  responses:
    BadRequest:
      description: Bad request - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Invalid request data"
            errors: ["Name is required", "Email format is invalid"]

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Resource not found"

    Conflict:
      description: Conflict - Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Account already exists"

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Internal server error"

tags:
  - name: Documentation
    description: API documentation and information
  - name: Accounts
    description: Account management operations with IP address support
  - name: Domains
    description: Domain management operations (creation and updates only)
  - name: Templates
    description: Domain template management operations
  - name: Domain-Account
    description: Domain-account relationship management
  - name: Status
    description: API status, health checks, and synchronization
