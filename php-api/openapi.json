{
  "openapi": "3.0.3",
  "info": {
    "title": "PDNSAdmin PHP API",
    "description": "PHP API wrapper for PowerDNS Admin with local database storage.\n\n## Authentication\nUses Basic Authentication with base64 encoded credentials.\nInclude `Authorization: Basic <base64-credentials>` header in requests.\n\n**Admin API Key Required** - Single API key provides full administrative access.\n\n## Core Features\n- Account and user management with PowerDNS Admin sync\n- Domain management with intelligent ID/name detection\n- DNS record management via PowerDNS Server API\n- Template-based domain creation\n- Local database caching and metadata storage\n",
    "version": "1.0.9",
    "contact": {
      "name": "API Support - Silvester van der Leer",
      "email": "silvester@avant.nl"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://pdnsapi.avant.nl/",
      "description": "Production server (PowerDNS Admin API)"
    }
  ],
  "security": [
    {
      "AdminApiKey": []
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "API Documentation",
        "description": "Returns API documentation and available endpoints",
        "tags": [
          "Documentation"
        ],
        "security": [],
        "responses": {
          "200": {
            "description": "API documentation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDocumentation"
                }
              }
            }
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "summary": "Get accounts with smart filtering",
        "description": "Retrieve accounts from local database with PowerDNS Admin synchronization.\n\n**\ud83d\udd11 Requires Admin API Key**\n\n**Filter Logic (AND conditions):**\n- Single parameter: Direct lookup\n- Multiple parameters: Must ALL match (validation)\n- `?id=14&username=admin` returns user only if ID 14 has username \"admin\"\n- Returns 404 if parameters don't match the same user\n",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by account ID (can combine with other filters for validation)"
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by username (can combine with ID for validation)"
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by email address (can combine with other filters)"
          },
          {
            "name": "sync",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Sync from PowerDNS Admin before filtering"
          }
        ],
        "responses": {
          "200": {
            "description": "List of accounts or single account (with AND validation)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "all_accounts": {
                    "summary": "All accounts",
                    "value": {
                      "data": [],
                      "message": "Users retrieved successfully (47 users available)"
                    }
                  },
                  "single_filter": {
                    "summary": "Single filter (ID only)",
                    "value": {
                      "data": [
                        {
                          "id": 14,
                          "username": "admin"
                        }
                      ],
                      "message": "Found 1 user with ID 14"
                    }
                  },
                  "and_validation_success": {
                    "summary": "AND validation success",
                    "value": {
                      "data": [
                        {
                          "id": 14,
                          "username": "admin"
                        }
                      ],
                      "message": "Found user with ID 14 and username 'admin'"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Valid Admin API Key required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No accounts found or AND validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "summary": "Create a new account",
        "description": "Create a new account with optional IP addresses. The account is created in both PDNSAdmin and local database.\n\n**\ufffd Requires Admin API Key**\n",
        "tags": [
          "Accounts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCreate"
              },
              "examples": {
                "powerdns_admin_user": {
                  "summary": "PowerDNS Admin User Creation",
                  "value": {
                    "username": "testuser1754424578",
                    "plain_text_password": "36440b7d5ab7521f",
                    "firstname": "Test",
                    "lastname": "User",
                    "email": "test@example.com",
                    "role": {
                      "id": 2,
                      "name": "User"
                    },
                    "ip_addresses": [
                      "192.168.1.101",
                      "192.168.1.102",
                      "2001:db8::2"
                    ],
                    "customer_id": 1001
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Account created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data"
          },
          "401": {
            "description": "Unauthorized - Valid Admin API Key required"
          },
          "409": {
            "description": "Conflict - Username or email already exists"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "summary": "Update account",
        "description": "Update an existing account using JSON input. Changes are synced with PDNSAdmin (except IP addresses).\n\n**\ufffd Requires Admin API Key**\n\n**JSON Payload (Required):**\n- Include account identifier (`id` or `username`)\n- Include fields to update\n- IP addresses are stored locally only\n",
        "tags": [
          "Accounts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdateRequest"
              },
              "examples": {
                "update_by_id": {
                  "summary": "Update account by ID",
                  "value": {
                    "id": 94,
                    "firstname": "Updated First Name",
                    "lastname": "Updated Last Name",
                    "email": "updated@example.com",
                    "ip_addresses": [
                      "192.168.1.101",
                      "192.168.1.102"
                    ]
                  }
                },
                "update_by_username": {
                  "summary": "Update account by username",
                  "value": {
                    "username": "johndoe",
                    "customer_id": 1001,
                    "ip_addresses": [
                      "192.168.1.200",
                      "2001:db8::5"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete account",
        "description": "Delete an account from PowerDNS Admin using JSON input. The local database is automatically synced after deletion.\n\n**\ufffd Requires Admin API Key**\n**\u26a0\ufe0f Warning:** This action cannot be undone.\n\n**JSON Payload (Required):**\n- Use `{\"id\": 94}` to delete account by ID\n- Use `{\"username\": \"johndoe\"}` to delete account by username\n\n**Important:** This operation only deletes from PowerDNS Admin. The local database is updated through \nautomatic synchronization, ensuring the API remains the authoritative source for account management.\n",
        "tags": [
          "Accounts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountIdentifier"
              },
              "examples": {
                "delete_by_id": {
                  "summary": "Delete account by ID",
                  "value": {
                    "id": 94
                  }
                },
                "delete_by_username": {
                  "summary": "Delete account by username",
                  "value": {
                    "username": "johndoe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/domains": {
      "get": {
        "summary": "Get domains with intelligent search",
        "description": "Retrieve domains/zones with automatic PowerDNS Admin synchronization.\n\n**Smart Query with AND Filters:**\n- `q` parameter: Auto-detects search type (ID/name/pattern/contains)  \n- Additional filters: Combined as AND conditions\n- `?q=example.com&account_id=5` finds \"example.com\" AND belongs to account 5\n",
        "tags": [
          "Domains",
          "Domain Search"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Smart query (auto-detects ID/name/pattern/contains) - primary filter"
          },
          {
            "name": "account_id",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Additional filter - must match account (AND condition with q)"
          },
          {
            "name": "sync",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Sync from PowerDNS Admin before filtering"
          },
          {
            "name": "details",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include full DNS records via PowerDNS Server API (requires PowerDNS API key)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of domains/zones",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/Domain"
                          },
                          {
                            "$ref": "#/components/schemas/DomainDetails"
                          }
                        ]
                      }
                    },
                    "message": {
                      "type": "string"
                    },
                    "query_type": {
                      "type": "string",
                      "enum": [
                        "all",
                        "id",
                        "name",
                        "pattern",
                        "contains",
                        "account"
                      ],
                      "description": "The type of query that was executed"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add domain to account",
        "description": "Add a domain to a specific account. This operation uses direct API calls\nto assign domains to accounts in PowerDNS Admin.\n\n**JSON Payload:**\n- `domain_name`: Domain name to assign (required)\n- `account_id`: Target account ID (required)\n",
        "tags": [
          "Domains"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "domain_name",
                  "account_id"
                ],
                "properties": {
                  "domain_name": {
                    "type": "string",
                    "description": "Domain name to add (include trailing dot)"
                  },
                  "account_id": {
                    "type": "integer",
                    "description": "Account ID to assign domain to"
                  }
                }
              },
              "examples": {
                "add_domain_to_account": {
                  "summary": "Add domain to account",
                  "value": {
                    "domain_name": "example.com.",
                    "account_id": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain added to account successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "summary": "Update domain by ID or name",
        "description": "Update domain settings and DNS records.\nSupports both ID and name-based updates with PowerDNS Admin and Server API integration.\n\n**\ud83d\udd11 Requires Admin API Key**\n\n**\u26a0\ufe0f SECURITY WARNINGS:**\n- **Domain Ownership:** Only domains owned by authenticated account can be modified\n- **DNS Record Validation:** All DNS records are validated before application\n- **Account Transfer:** Changing account_id requires ownership verification\n- **Zone Type Changes:** Changing kind/masters affects DNS resolution - use with caution\n\n**\ud83d\udee1\ufe0f VALIDATION ENFORCED:**\n- DNS record content validated (A/AAAA/CNAME/MX formats)\n- Master server IPs validated for Slave zones\n- Account ownership verified before transfers\n- DNSSEC changes require additional validation\n",
        "tags": [
          "Domains",
          "Domain Management"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "Domain ID (use this OR name, not both)"
                  },
                  "name": {
                    "type": "string",
                    "description": "Domain name (use this OR id, not both)"
                  },
                  "account_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Account ID to assign domain to"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Native",
                      "Master",
                      "Slave"
                    ],
                    "description": "Zone kind"
                  },
                  "masters": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Master servers (for Slave zones)"
                  },
                  "dnssec": {
                    "type": "boolean",
                    "description": "Enable DNSSEC"
                  },
                  "rrsets": {
                    "type": "array",
                    "description": "DNS record updates (PowerDNS Server API)",
                    "items": {
                      "$ref": "#/components/schemas/RRSetUpdate"
                    }
                  }
                },
                "anyOf": [
                  {
                    "required": [
                      "id"
                    ]
                  },
                  {
                    "required": [
                      "name"
                    ]
                  }
                ]
              },
              "examples": {
                "update_by_id": {
                  "summary": "Update domain by ID",
                  "value": {
                    "id": 123,
                    "kind": "Native",
                    "dnssec": true
                  }
                },
                "update_by_name": {
                  "summary": "Update domain by name",
                  "value": {
                    "name": "example.com",
                    "account_id": 2
                  }
                },
                "update_dns_records": {
                  "summary": "Update DNS records by name",
                  "value": {
                    "name": "example.com",
                    "rrsets": [
                      {
                        "name": "www.example.com.",
                        "type": "A",
                        "changetype": "REPLACE",
                        "records": [
                          {
                            "content": "192.168.1.100"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "validation_warnings": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid DNS records or validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "field": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Valid Admin API Key required"
          },
          "403": {
            "description": "Forbidden - Domain ownership verification failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Domain not found"
          },
          "422": {
            "description": "Validation Error - DNS record validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "validation_errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "field": {
                            "type": "string"
                          },
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete domain by ID or name",
        "description": "**\ud83d\udea8 DESTRUCTIVE OPERATION** - Delete domain permanently.\n\n**\ud83d\udd11 Requires Admin API Key**\n\n**\u26a0\ufe0f CRITICAL SECURITY WARNINGS:**\n- **Irreversible Action:** Domain deletion cannot be undone\n- **Ownership Verification:** Only domains owned by authenticated account can be deleted  \n- **DNS Resolution Impact:** Domain will immediately stop resolving\n- **Cascade Effects:** All DNS records will be permanently lost\n- **Zone Dependencies:** Check for dependent subdomains before deletion\n\n**\ud83d\udee1\ufe0f SAFETY MEASURES:**\n- Domain ownership verified before deletion\n- Audit logging with administrator details\n- PowerDNS Admin and local database automatically synced\n",
        "tags": [
          "Domains",
          "Domain Management"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "Domain ID (use this OR name, not both)"
                  },
                  "name": {
                    "type": "string",
                    "description": "Domain name (use this OR id, not both)"
                  }
                },
                "anyOf": [
                  {
                    "required": [
                      "id"
                    ]
                  },
                  {
                    "required": [
                      "name"
                    ]
                  }
                ]
              },
              "examples": {
                "delete_by_id": {
                  "summary": "Delete domain by ID",
                  "value": {
                    "id": 123
                  }
                },
                "delete_by_name": {
                  "summary": "Delete domain by name",
                  "value": {
                    "name": "example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "audit_log": {
                      "type": "object",
                      "properties": {
                        "deleted_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "records_count": {
                          "type": "integer",
                          "description": "Number of DNS records that were deleted"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid domain identifier"
          },
          "401": {
            "description": "Unauthorized - Valid Admin API Key required"
          },
          "403": {
            "description": "Forbidden - Domain ownership verification failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Domain not found"
          },
          "409": {
            "description": "Conflict - Domain has active dependencies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "dependencies": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/domains/{id}": {
      "get": {
        "summary": "Get individual domain by ID",
        "description": "Retrieve a specific domain by its ID from the local database.\n",
        "tags": [
          "Domains"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Domain ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Domain details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Domain"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "summary": "Update domain by ID (path parameter)",
        "description": "Update a specific domain using path parameter for ID.\nAlternative to PUT /domains with JSON payload.\n\n**\ud83d\udd10 SECURITY REQUIREMENTS:**\n- Admin API key required for ALL modifications\n- Ownership validation enforced (can only modify domains you own)\n- Input validation prevents DNS record injection attacks\n- All changes logged for audit trails\n",
        "tags": [
          "Domains"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Domain ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainUpdate"
              },
              "examples": {
                "change_account": {
                  "summary": "Change domain account",
                  "value": {
                    "account_id": 2
                  }
                },
                "update_settings": {
                  "summary": "Update domain settings",
                  "value": {
                    "kind": "Slave",
                    "masters": [
                      "192.168.1.100"
                    ],
                    "dnssec": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input data\n- Invalid domain configuration\n- Malformed JSON payload\n- Invalid DNS record format\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - security violation\n- Domain not owned by authenticated user\n- Insufficient permissions for operation\n- API key lacks required privileges\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "description": "Validation failed\n- DNS record validation errors\n- Domain name format violations\n- Invalid record type combinations\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete domain by ID",
        "description": "Delete a domain from both local database and PowerDNS Admin.\n\n**\u26a0\ufe0f DANGER: IRREVERSIBLE OPERATION**\n- Permanently deletes domain and ALL DNS records\n- Cannot be undone - ensure you have backups\n- Requires admin API key with full privileges\n\n**\ud83d\udd10 SECURITY REQUIREMENTS:**\n- Admin API key required for ALL deletions\n- Ownership validation enforced (can only delete domains you own)\n- Domain must be in \"inactive\" state before deletion\n- All operations logged for audit trails\n",
        "tags": [
          "Domains"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Domain ID"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Force deletion even if domain has active records (dangerous)"
          }
        ],
        "responses": {
          "200": {
            "description": "Domain deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - security violation\n- Domain not owned by authenticated user\n- Domain has active DNS records (use force=true to override)\n- API key lacks deletion privileges\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Conflict - cannot delete\n- Domain has active DNS records\n- Domain is referenced by other resources\n- Concurrent modification detected\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/templates": {
      "get": {
        "summary": "Get all domain templates",
        "description": "Retrieve all available domain templates from PowerDNS Admin.\nTemplates can be used to create domains with predefined settings.\n\n**\ud83d\udd11 Requires Admin API Key**\n",
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "List of domain templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Template"
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Valid Admin API Key required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "summary": "Create new domain template",
        "description": "Create a new domain template in PowerDNS Admin.\n\n**\ud83d\udd11 Requires Admin API Key**\n\n**\ud83d\udd10 SECURITY CONSIDERATIONS:**\n- Template content validated for DNS record injection\n- Template names must be unique and follow naming conventions\n- All template creation logged for audit trails\n- Input sanitization prevents malicious template content\n",
        "tags": [
          "Templates"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid template data\n- Invalid DNS record format in template\n- Malformed JSON payload\n- Template name validation failed\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Valid Admin API Key required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - template already exists\n- Template name already in use\n- Duplicate template content detected\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed\n- DNS record validation errors in template\n- Invalid template structure\n- Template content security violations\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/templates/{id}": {
      "get": {
        "summary": "Get template by ID",
        "description": "Retrieve a specific domain template by its ID.\n",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Template ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Template details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Template"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "summary": "Update template",
        "description": "Update an existing domain template.\n",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Template ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete template",
        "description": "Delete a domain template from PowerDNS Admin.\n**Warning**: This action cannot be undone.\n",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Template ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Template deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/templates/{id}/create-domain": {
      "post": {
        "summary": "Create domain from template",
        "description": "Create a new domain using a predefined template.\nThe template will be applied to set up the domain with default records and settings.\n",
        "tags": [
          "Templates",
          "Domains"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Template ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Domain name to create"
                  },
                  "account_id": {
                    "type": "integer",
                    "description": "Account ID to assign the domain to"
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional description for the domain"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Domain created from template successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Domain"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/domain-account": {
      "post": {
        "summary": "Domain-Account operations",
        "description": "Perform operations to manage domain-account relationships.\n\n**\ud83d\udd11 Requires Admin API Key**\n\n**\u26a0\ufe0f CRITICAL SECURITY WARNINGS:**\n- **DOMAIN HIJACKING RISK:** Can reassign domains between accounts\n- **OWNERSHIP VALIDATION:** Must verify current account owns domain before changes\n- **AUDIT TRAIL:** All domain reassignments logged with timestamps and user info\n- **IRREVERSIBLE:** Domain reassignments cannot be easily undone\n\n**\ud83d\udd10 SECURITY REQUIREMENTS:**\n- Admin API key required for ALL operations\n- Domain ownership verified before any modifications\n- Account permissions checked before assignments\n- Rate limiting enforced to prevent abuse\n",
        "tags": [
          "Domain-Account"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "add",
                "remove",
                "list"
              ]
            },
            "description": "Action to perform (add, remove, list)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DomainAccountAdd"
                  },
                  {
                    "$ref": "#/components/schemas/DomainAccountRemove"
                  },
                  {
                    "$ref": "#/components/schemas/DomainAccountList"
                  }
                ]
              },
              "examples": {
                "add_domain": {
                  "summary": "Add domain to account",
                  "value": {
                    "domain_name": "example.com.",
                    "account_id": 1
                  }
                },
                "remove_domain": {
                  "summary": "Remove domain from account",
                  "value": {
                    "domain_name": "example.com."
                  }
                },
                "list_domains": {
                  "summary": "List account domains",
                  "value": {
                    "account_id": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SuccessMessage"
                    },
                    {
                      "$ref": "#/components/schemas/AccountDomainsList"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid operation parameters\n- Invalid domain name format\n- Missing required fields\n- Invalid account ID\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Valid Admin API Key required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - security violation\n- Domain not owned by source account\n- Insufficient permissions for domain reassignment\n- Account lacks required privileges\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found\n- Domain does not exist\n- Account not found\n- Domain-account relationship not found\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - operation cannot be completed\n- Domain already assigned to target account\n- Concurrent modification detected\n- Domain in locked state\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/status": {
      "get": {
        "summary": "API status and health check",
        "description": "Get API status and health information.\n\n**\ud83d\udd11 Requires Admin API Key**\n\n**\u2139\ufe0f INFORMATION SECURITY:**\n- System status information restricted to admins only\n- Health checks reveal internal system state\n- Connection tests may expose backend configuration\n- All status requests logged for security monitoring\n",
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "test_connection",
                "sync_all",
                "health"
              ]
            },
            "description": "Specific action to perform"
          }
        ],
        "responses": {
          "200": {
            "description": "Status information",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiStatus"
                    },
                    {
                      "$ref": "#/components/schemas/ConnectionTest"
                    },
                    {
                      "$ref": "#/components/schemas/SyncResult"
                    },
                    {
                      "$ref": "#/components/schemas/HealthCheck"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Valid Admin API Key required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "AdminApiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "**ADMIN API KEY + GLOBAL IP ALLOWLIST AUTHENTICATION**\n\n**DUAL AUTHENTICATION - SIMPLE & SECURE:**\n1. **Valid Admin API Key** - Single key for all administrative access  \n2. **Global IP Allowlist** - Same allowlist applies to ALL endpoints uniformly\n\n**\ud83d\udccb AUTHENTICATION REQUIREMENTS:**\n- **Swagger UI access** - No authentication required (for easy development)\n- **OpenAPI documentation** - No authentication required (for easy access)  \n- **ALL API endpoints** - Full authentication required (API key + IP allowlist)\n- **Health check** - No authentication required (monitoring)\n\n**API Key Format:** `X-API-Key: <your-api-key>`\n\n**Example:** \n```\nAuthorization: Basic NDZiM2Q3OGM1NTdjZDY2YTA0N2EzODg5NzkxNGQyMDNhYjVjMzU5NzE5MTYxZTgzNmVjY2U1NTA4ZTU3YjFhOTo=\n```\n\n**\ud83d\udee1\ufe0f GLOBAL IP ALLOWLIST - DATABASE-DRIVEN & DYNAMIC:**\n- Single allowlist applies to ALL API endpoints uniformly\n- **Stored in MySQL database** for persistence and easy management\n- No per-endpoint complexity - either you're allowed or you're not\n- Both IPv4 and IPv6 addresses supported with CIDR notation\n- **Enable/disable IPs** without deletion for temporary access control\n- Easy to manage via CLI tool and audit via database logs\n\n**Dynamic Management via CLI:**\n```bash\n# List all allowed IPs\nphp manage-ips-clean.php list\n\n# Add IPs with descriptions\nphp manage-ips-clean.php add \"203.0.113.25\" \"Admin home IP\"\nphp manage-ips-clean.php add \"192.168.1.0/24\" \"Office network\"\nphp manage-ips-clean.php add \"2001:db8::/32\" \"IPv6 network\"\n\n# Temporarily disable/enable IPs\nphp manage-ips-clean.php disable \"203.0.113.25\"\nphp manage-ips-clean.php enable \"203.0.113.25\"\n\n# Remove IPs permanently\nphp manage-ips-clean.php remove \"203.0.113.25\"\n\n# Test IP access\nphp manage-ips-clean.php test \"192.168.1.100\"\n```\n\n**Database Storage:**\n```sql\n-- IPs stored in ip_allowlist table\nSELECT ip_address, description, enabled \nFROM ip_allowlist \nWHERE enabled = 1;\n```\n\n**Security Benefits:**\n- **Defense in depth:** Both API key AND IP must be valid\n- **Zero complexity:** Same rules apply everywhere  \n- **Dynamic management:** Add/remove IPs without restarts\n- **Database persistence:** Changes survive server restarts\n- **Temporary control:** Enable/disable without deletion\n- **Complete protection:** API inaccessible from non-allowed IPs\n- **Performance:** In-memory caching with database fallback\n\n**Security Notes:**\n- **Dual authentication:** API key AND IP allowlist required\n- One API key for all administrative operations  \n- Full access to accounts, domains, templates, and DNS records\n- **Database-driven allowlist** prevents unauthorized access even with valid key\n- Should be rotated regularly and kept secure\n- **Update allowlist dynamically** via CLI tool when network changes\n- **Audit trail:** All IP changes tracked in database with timestamps\n"
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request - Invalid input data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error",
              "error": "Invalid request data",
              "errors": [
                "Name is required",
                "Email format is invalid"
              ]
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error",
              "error": "Resource not found"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict - Resource already exists",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error",
              "error": "Account already exists"
            }
          }
        }
      },
      "ServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error",
              "error": "Internal server error"
            }
          }
        }
      }
    },
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Account ID"
          },
          "username": {
            "type": "string",
            "description": "Username (unique)"
          },
          "firstname": {
            "type": "string",
            "description": "First name"
          },
          "lastname": {
            "type": "string",
            "description": "Last name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address"
          },
          "role_id": {
            "type": "integer",
            "description": "Role ID (2 = User, 1 = Admin)"
          },
          "ip_addresses": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "ipv4 | ipv6"
            },
            "description": "List of IP addresses (IPv4/IPv6, local storage only)"
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer ID for business relationships"
          },
          "pdns_account_id": {
            "type": "integer",
            "nullable": true,
            "description": "PowerDNS Admin account ID (synced from PowerDNS Admin)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "AccountCreate": {
        "type": "object",
        "required": [
          "username",
          "plain_text_password",
          "firstname",
          "email"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Username for PowerDNS Admin (must be unique)"
          },
          "plain_text_password": {
            "type": "string",
            "description": "Plain text password for PowerDNS Admin user"
          },
          "firstname": {
            "type": "string",
            "description": "First name"
          },
          "lastname": {
            "type": "string",
            "description": "Last name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address"
          },
          "role": {
            "type": "object",
            "description": "User role object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Role ID (2 = User, 1 = Admin)"
              },
              "name": {
                "type": "string",
                "description": "Role name"
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "ip_addresses": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "ipv4 | ipv6"
            },
            "description": "List of IP addresses (IPv4/IPv6, local storage only)"
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer ID for business relationships"
          }
        }
      },
      "AccountIdentifier": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "Account ID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "username"
            ],
            "properties": {
              "username": {
                "type": "string",
                "description": "Account username"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Account identifier object (either ID or username, not both)"
      },
      "AccountUpdateRequest": {
        "type": "object",
        "oneOf": [
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "Account ID"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/AccountUpdate"
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "username"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Account username"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/AccountUpdate"
              }
            ]
          }
        ],
        "description": "Account update request with identifier and update fields"
      },
      "AccountUpdate": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string",
            "description": "First name"
          },
          "lastname": {
            "type": "string",
            "description": "Last name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address"
          },
          "role_id": {
            "type": "integer",
            "description": "Role ID"
          },
          "ip_addresses": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "ipv4 | ipv6"
            },
            "description": "List of IP addresses (IPv4/IPv6)"
          },
          "customer_id": {
            "type": "integer",
            "nullable": true,
            "description": "Customer ID"
          }
        }
      },
      "Domain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Domain ID"
          },
          "name": {
            "type": "string",
            "description": "Domain name"
          },
          "type": {
            "type": "string",
            "description": "Domain type"
          },
          "account_id": {
            "type": "integer",
            "nullable": true,
            "description": "Associated account ID"
          },
          "account_name": {
            "type": "string",
            "nullable": true,
            "description": "Associated account name"
          },
          "pdns_zone_id": {
            "type": "string",
            "description": "PDNSAdmin zone ID"
          },
          "kind": {
            "type": "string",
            "enum": [
              "Native",
              "Master",
              "Slave"
            ],
            "description": "Zone kind"
          },
          "masters": {
            "type": "string",
            "description": "Comma-separated list of master servers"
          },
          "dnssec": {
            "type": "boolean",
            "description": "DNSSEC enabled"
          },
          "account": {
            "type": "string",
            "description": "Account name from PDNSAdmin"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "DomainUpdate": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "integer",
            "nullable": true,
            "description": "Account ID to assign domain to (null to remove)"
          },
          "kind": {
            "type": "string",
            "enum": [
              "Native",
              "Master",
              "Slave"
            ],
            "description": "Zone kind"
          },
          "masters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of master servers"
          },
          "dnssec": {
            "type": "boolean",
            "description": "Enable DNSSEC"
          }
        }
      },
      "DomainSearchResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Local database ID"
          },
          "name": {
            "type": "string",
            "description": "Domain name"
          },
          "pdns_zone_id": {
            "type": "integer",
            "description": "PowerDNS zone ID"
          }
        }
      },
      "DomainDetails": {
        "type": "object",
        "description": "Complete domain information from PowerDNS Server API",
        "properties": {
          "id": {
            "type": "string",
            "description": "Zone ID (FQDN with trailing dot)"
          },
          "name": {
            "type": "string",
            "description": "Zone name (FQDN with trailing dot)"
          },
          "type": {
            "type": "string",
            "description": "Resource type"
          },
          "kind": {
            "type": "string",
            "description": "Zone kind"
          },
          "dnssec": {
            "type": "boolean",
            "description": "DNSSEC enabled"
          },
          "edited_serial": {
            "type": "integer",
            "description": "Last edited serial"
          },
          "masters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Master server addresses"
          },
          "rrsets": {
            "type": "array",
            "description": "DNS record sets",
            "items": {
              "$ref": "#/components/schemas/RRSet"
            }
          }
        }
      },
      "RRSet": {
        "type": "object",
        "description": "DNS Resource Record Set",
        "properties": {
          "name": {
            "type": "string",
            "description": "Record name (FQDN with trailing dot)"
          },
          "type": {
            "type": "string",
            "description": "DNS record type"
          },
          "ttl": {
            "type": "integer",
            "description": "Time to live in seconds"
          },
          "records": {
            "type": "array",
            "description": "DNS records in this set",
            "items": {
              "$ref": "#/components/schemas/DNSRecord"
            }
          }
        }
      },
      "DNSRecord": {
        "type": "object",
        "description": "Individual DNS record",
        "properties": {
          "content": {
            "type": "string",
            "description": "Record content/value"
          },
          "disabled": {
            "type": "boolean",
            "description": "Whether record is disabled"
          }
        }
      },
      "RRSetUpdate": {
        "type": "object",
        "description": "DNS record set update operation with security validation.\n\n**\ud83d\udee1\ufe0f SECURITY VALIDATION:**\n- Record names must belong to the domain being updated\n- DNS record content validated for proper format\n- Dangerous record types (NS, SOA) require additional verification\n- Maximum 100 records per update to prevent abuse\n",
        "required": [
          "name",
          "type",
          "changetype"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Record name (FQDN with trailing dot) - must be subdomain of zone",
            "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?)*\\.$"
          },
          "type": {
            "type": "string",
            "description": "DNS record type (A, AAAA, CNAME, MX, TXT, SRV)",
            "enum": [
              "A",
              "AAAA",
              "CNAME",
              "MX",
              "TXT",
              "SRV",
              "PTR",
              "NS"
            ]
          },
          "changetype": {
            "type": "string",
            "enum": [
              "REPLACE",
              "DELETE"
            ],
            "description": "Operation type"
          },
          "records": {
            "type": "array",
            "description": "Records for REPLACE operations (omit for DELETE)",
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/DNSRecord"
            }
          }
        }
      },
      "DomainAccountAdd": {
        "type": "object",
        "required": [
          "domain_name",
          "account_id"
        ],
        "properties": {
          "domain_name": {
            "type": "string",
            "description": "Domain name to add to account"
          },
          "account_id": {
            "type": "integer",
            "description": "Account ID"
          }
        }
      },
      "DomainAccountRemove": {
        "type": "object",
        "required": [
          "domain_name"
        ],
        "properties": {
          "domain_name": {
            "type": "string",
            "description": "Domain name to remove from account"
          }
        }
      },
      "DomainAccountList": {
        "type": "object",
        "required": [
          "account_id"
        ],
        "properties": {
          "account_id": {
            "type": "integer",
            "description": "Account ID to list domains for"
          }
        }
      },
      "AccountDomainsList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "account": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              },
              "domains": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Domain"
                }
              },
              "domain_count": {
                "type": "integer"
              }
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ApiStatus": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "api_version": {
                "type": "string"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "endpoints": {
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "accounts": "/api/accounts",
                  "domains": "/api/domains",
                  "status": "/api/status"
                }
              },
              "pdns_admin_status": {
                "type": "string",
                "enum": [
                  "connected",
                  "disconnected"
                ]
              },
              "database_status": {
                "type": "string",
                "enum": [
                  "connected",
                  "disconnected"
                ]
              }
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ConnectionTest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "connected",
                  "disconnected"
                ]
              },
              "pdns_domains_count": {
                "type": "integer"
              }
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "SyncResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "accounts": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "count": {
                    "type": "integer"
                  }
                }
              },
              "domains": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "count": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "HealthCheck": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "enum": [
                  "connected",
                  "disconnected",
                  "unknown"
                ]
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "version": {
                "type": "string"
              },
              "local_accounts_count": {
                "type": "integer"
              },
              "local_domains_count": {
                "type": "integer"
              }
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ApiDocumentation": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "endpoints": {
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "accounts": "/api/accounts",
                  "domains": "/api/domains",
                  "status": "/api/status"
                }
              },
              "setup_instructions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "SuccessMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "Template": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Template ID"
          },
          "name": {
            "type": "string",
            "description": "Template name"
          },
          "description": {
            "type": "string",
            "description": "Template description"
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateRecord"
            },
            "description": "Template records"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "TemplateCreate": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name"
          },
          "description": {
            "type": "string",
            "description": "Template description"
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateRecordCreate"
            },
            "description": "Template records to create"
          }
        }
      },
      "TemplateUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name"
          },
          "description": {
            "type": "string",
            "description": "Template description"
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateRecordCreate"
            },
            "description": "Template records"
          }
        }
      },
      "TemplateRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Record ID"
          },
          "name": {
            "type": "string",
            "description": "Record name"
          },
          "type": {
            "type": "string",
            "description": "Record type"
          },
          "content": {
            "type": "string",
            "description": "Record content"
          },
          "ttl": {
            "type": "integer",
            "description": "Time to live"
          },
          "priority": {
            "type": "integer",
            "description": "Record priority (for MX records)"
          }
        }
      },
      "TemplateRecordCreate": {
        "type": "object",
        "required": [
          "name",
          "type",
          "content"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Record name"
          },
          "type": {
            "type": "string",
            "enum": [
              "A",
              "AAAA",
              "CNAME",
              "MX",
              "TXT",
              "NS",
              "PTR",
              "SRV"
            ],
            "description": "Record type"
          },
          "content": {
            "type": "string",
            "description": "Record content"
          },
          "ttl": {
            "type": "integer",
            "description": "Time to live, default 3600"
          },
          "priority": {
            "type": "integer",
            "description": "Record priority (for MX records)"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Detailed error messages"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Documentation",
      "description": "API documentation and information"
    },
    {
      "name": "Accounts",
      "description": "Account management operations with IP address support"
    },
    {
      "name": "Domains",
      "description": "Smart domain management with ID/name detection, DNS records, and PowerDNS Server API integration"
    },
    {
      "name": "Domain Search",
      "description": "Intelligent domain search by ID, name, pattern, or contains matching"
    },
    {
      "name": "Domain Management",
      "description": "Advanced domain operations including updates, deletion and DNS record management"
    },
    {
      "name": "Templates",
      "description": "Domain template management operations"
    },
    {
      "name": "Domain-Account",
      "description": "Domain-account relationship management"
    },
    {
      "name": "Status",
      "description": "API status, health checks, and synchronization"
    }
  ]
}