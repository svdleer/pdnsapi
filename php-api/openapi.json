{
  "openapi": "3.0.3",
  "info": {
    "title": "PDNSAdmin PHP API",
    "description": "PHP API wrapper for PDNSAdmin with local database storage and extended functionality.\n\n## Authentication\nThis API uses **Basic Authentication** with base64 encoded credentials.\nUse the `Authorization: Basic <base64-credentials>` header for all authenticated requests.\n\n## Features\n- **Account management** with automatic PowerDNS Admin synchronization\n- **IP address storage** for accounts (local database only)\n- **Domain management** with PDNSAdmin synchronization\n- **Real-time sync** from PowerDNS Admin API\n- **Local database caching** for performance and extended metadata\n- **RESTful and legacy API support** for flexible access patterns\n\n## Key Functionality\n- Accounts are automatically synced from PowerDNS Admin on each API call\n- IP addresses can be assigned to accounts (stored locally, not in PowerDNS Admin)\n- Domain management maintains compatibility with PowerDNS Admin\n- Local database provides caching and additional account metadata storage\n\n## Important Notes\n- Account data is synced FROM PowerDNS Admin (read-only sync)\n- IP addresses are stored locally and NOT sent to PowerDNS Admin\n- Accounts endpoint automatically refreshes data from PowerDNS Admin\n- Local database maintains PowerDNS Admin account ID relationships\n",
    "version": "1.0.1",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://pdnsapi.avant.nl",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "BasicAuth": []
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "API Documentation",
        "description": "Returns API documentation and available endpoints",
        "tags": [
          "Documentation"
        ],
        "security": [],
        "responses": {
          "200": {
            "description": "API documentation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDocumentation"
                }
              }
            }
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "summary": "Get all accounts (synced from PowerDNS Admin)",
        "description": "Retrieve a list of all accounts with automatic synchronization from PowerDNS Admin.\n\n**Recommended Access Patterns:**\n- `GET /accounts` - Get all accounts\n- `POST /accounts/get` - Get specific account by ID/username (JSON input preferred)\n- `GET /accounts?id=123` - Get account by ID (query parameter, legacy)\n- `GET /accounts?username=name` - Get account by username (query parameter, legacy)\n\n**JSON Input Preference:**\nFor single account retrieval, use the `POST /accounts/get` endpoint with JSON input for better consistency:\n```json\n{\"id\": 94}\n// or\n{\"username\": \"johndoe\"}\n```\n\n**Functionality:**\n- Automatically fetches latest accounts from PowerDNS Admin API\n- Syncs account data to local database for caching and extended metadata\n- Returns accounts with IP addresses (if assigned locally)\n- Maintains PowerDNS Admin account ID relationships\n\n**Data Sources:**\n- Account data: PowerDNS Admin (synchronized on each request)\n- IP addresses: Local database only (not stored in PowerDNS Admin)\n- Additional metadata: Local database for extended functionality\n",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "sync",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Set to true to sync accounts from PowerDNS Admin before returning results"
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by specific account ID to retrieve a single account",
            "example": 94
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by specific username to retrieve a single account",
            "example": "johndoe"
          }
        ],
        "responses": {
          "200": {
            "description": "List of accounts or single account (depending on parameters)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Accounts retrieved successfully"
                    }
                  }
                },
                "examples": {
                  "all_accounts": {
                    "summary": "All accounts",
                    "description": "GET /accounts (returns all accounts)",
                    "value": {
                      "data": [],
                      "message": "Accounts retrieved successfully"
                    }
                  },
                  "account_by_id": {
                    "summary": "Single account by ID",
                    "description": "GET /accounts?id=94 (returns specific account)",
                    "value": {
                      "data": [
                        {
                          "id": 94,
                          "username": "testuser",
                          "firstname": "Test"
                        }
                      ]
                    }
                  },
                  "account_by_username": {
                    "summary": "Single account by username",
                    "description": "GET /accounts?username=johndoe (returns specific account)",
                    "value": {
                      "data": [
                        {
                          "id": 1,
                          "username": "johndoe",
                          "firstname": "John"
                        }
                      ],
                      "type": "string",
                      "example": "Accounts retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "summary": "Create a new account",
        "description": "Create a new account with optional IP addresses. The account is created in both PDNSAdmin and local database.",
        "tags": [
          "Accounts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCreate"
              },
              "examples": {
                "powerdns_admin_user": {
                  "summary": "PowerDNS Admin User Creation",
                  "value": {
                    "username": "testuser1754424578",
                    "plain_text_password": "36440b7d5ab7521f",
                    "firstname": "Test",
                    "lastname": "User",
                    "email": "test@example.com",
                    "role": {
                      "id": 2,
                      "name": "User"
                    },
                    "ip_addresses": [
                      "192.168.1.101",
                      "192.168.1.102",
                      "2001:db8::2"
                    ],
                    "customer_id": 1001
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Account created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/accounts/get": {
      "post": {
        "summary": "Get specific account by ID or username",
        "description": "Retrieve a specific account using JSON input parameters.\n\n**JSON Input:**\n- Use `{\"id\": 94}` to get account by ID\n- Use `{\"username\": \"johndoe\"}` to get account by username\n- Only one identifier should be provided per request\n",
        "tags": [
          "Accounts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountIdentifier"
              },
              "examples": {
                "get_by_id": {
                  "summary": "Get account by ID",
                  "value": {
                    "id": 94
                  }
                },
                "get_by_username": {
                  "summary": "Get account by username",
                  "value": {
                    "username": "johndoe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/accounts/update": {
      "post": {
        "summary": "Update account",
        "description": "Update an existing account using JSON input. Changes are synced with PDNSAdmin (except IP addresses).\n\n**JSON Input:**\n- Include account identifier (`id` or `username`)\n- Include fields to update\n- IP addresses are stored locally only\n",
        "tags": [
          "Accounts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdateRequest"
              },
              "examples": {
                "update_by_id": {
                  "summary": "Update account by ID",
                  "value": {
                    "id": 94,
                    "firstname": "Updated First Name",
                    "lastname": "Updated Last Name",
                    "email": "updated@example.com",
                    "ip_addresses": [
                      "192.168.1.101",
                      "192.168.1.102"
                    ]
                  }
                },
                "update_by_username": {
                  "summary": "Update account by username",
                  "value": {
                    "username": "johndoe",
                    "customer_id": 1001,
                    "ip_addresses": [
                      "192.168.1.200",
                      "2001:db8::5"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/accounts/delete": {
      "post": {
        "summary": "Delete account",
        "description": "Delete an account from PowerDNS Admin using JSON input. The local database is automatically synced after deletion.\n\n**JSON Input:**\n- Use `{\"id\": 94}` to delete account by ID\n- Use `{\"username\": \"johndoe\"}` to delete account by username\n\n**Important:** This operation only deletes from PowerDNS Admin. The local database is updated through \nautomatic synchronization, ensuring the API remains the authoritative source for account management.\n",
        "tags": [
          "Accounts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountIdentifier"
              },
              "examples": {
                "delete_by_id": {
                  "summary": "Delete account by ID",
                  "value": {
                    "id": 94
                  }
                },
                "delete_by_username": {
                  "summary": "Delete account by username",
                  "value": {
                    "username": "johndoe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/domains": {
      "get": {
        "summary": "Get all domains (synced from PowerDNS Admin)",
        "description": "Retrieve a list of all domains with automatic synchronization from PowerDNS Admin.\n\n**Important:** Domain creation is not supported through this API. \nDomains must be created in PowerDNS Admin directly, then synced using the ?action=sync parameter.\n\n**Functionality:**\n- Automatically fetches latest domains from PowerDNS Admin API\n- Syncs domain data to local database for caching\n- Returns domains with account relationships\n- Use ?action=sync to force refresh from PowerDNS Admin\n",
        "tags": [
          "Domains"
        ],
        "parameters": [
          {
            "name": "sync",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Set to true to sync domains from PDNSAdmin before returning results"
          },
          {
            "name": "account_id",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Filter domains by account ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of domains",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Domain"
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/domains/get": {
      "post": {
        "summary": "Get domain by ID",
        "description": "Retrieve a specific domain by its ID using JSON input.\n\n**JSON Input:**\n- Use `{\"id\": 123}` to get domain by ID\n",
        "tags": [
          "Domains"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "Domain ID",
                    "example": 123
                  }
                }
              },
              "examples": {
                "get_by_id": {
                  "summary": "Get domain by ID",
                  "value": {
                    "id": 123
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Domain"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/domains/update": {
      "post": {
        "summary": "Update domain",
        "description": "Update an existing domain using JSON input. If account_id is changed, \nthe domain assignment is automatically updated in PDNSAdmin.\n\n**JSON Input:**\n- Include domain identifier (`id`)\n- Include fields to update\n",
        "tags": [
          "Domains"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Domain ID",
                        "example": 123
                      }
                    }
                  },
                  {
                    "$ref": "#/components/schemas/DomainUpdate"
                  }
                ]
              },
              "examples": {
                "change_account": {
                  "summary": "Change domain account",
                  "value": {
                    "id": 123,
                    "account_id": 2
                  }
                },
                "remove_account": {
                  "summary": "Remove from account",
                  "value": {
                    "id": 123,
                    "account_id": null
                  }
                },
                "update_settings": {
                  "summary": "Update domain settings",
                  "value": {
                    "id": 123,
                    "kind": "Slave",
                    "masters": [
                      "192.168.1.100"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/domain-account": {
      "post": {
        "summary": "Domain-Account operations",
        "description": "Perform operations to manage domain-account relationships",
        "tags": [
          "Domain-Account"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "add",
                "remove",
                "list"
              ]
            },
            "description": "Action to perform (add, remove, list)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DomainAccountAdd"
                  },
                  {
                    "$ref": "#/components/schemas/DomainAccountRemove"
                  },
                  {
                    "$ref": "#/components/schemas/DomainAccountList"
                  }
                ]
              },
              "examples": {
                "add_domain": {
                  "summary": "Add domain to account",
                  "value": {
                    "domain_name": "example.com.",
                    "account_id": 1
                  }
                },
                "remove_domain": {
                  "summary": "Remove domain from account",
                  "value": {
                    "domain_name": "example.com."
                  }
                },
                "list_domains": {
                  "summary": "List account domains",
                  "value": {
                    "account_id": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SuccessMessage"
                    },
                    {
                      "$ref": "#/components/schemas/AccountDomainsList"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/status": {
      "get": {
        "summary": "API status",
        "description": "Get API status and health information",
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "test_connection",
                "sync_all",
                "health"
              ]
            },
            "description": "Specific action to perform"
          }
        ],
        "responses": {
          "200": {
            "description": "Status information",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiStatus"
                    },
                    {
                      "$ref": "#/components/schemas/ConnectionTest"
                    },
                    {
                      "$ref": "#/components/schemas/SyncResult"
                    },
                    {
                      "$ref": "#/components/schemas/HealthCheck"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "Basic Authentication using base64 encoded credentials.\n\n**Format:** `Authorization: Basic <base64-encoded-credentials>`\n\n**Example:** \n```\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\n**Note:** The credentials should be base64 encoded before sending the request.\n"
      }
    },
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Account ID",
            "example": 1
          },
          "username": {
            "type": "string",
            "description": "Username (unique)",
            "example": "testuser"
          },
          "firstname": {
            "type": "string",
            "description": "First name",
            "example": "John"
          },
          "lastname": {
            "type": "string",
            "description": "Last name",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address",
            "example": "john@example.com"
          },
          "role_id": {
            "type": "integer",
            "description": "Role ID (2 = User, 1 = Admin)",
            "example": 2
          },
          "ip_addresses": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "ipv4 | ipv6"
            },
            "description": "List of IP addresses (IPv4/IPv6, local storage only)",
            "example": [
              "192.168.1.100",
              "2001:db8::1"
            ]
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer ID for business relationships",
            "example": 1001
          },
          "pdns_account_id": {
            "type": "integer",
            "nullable": true,
            "description": "PowerDNS Admin account ID (synced from PowerDNS Admin)",
            "example": 12
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "AccountCreate": {
        "type": "object",
        "required": [
          "username",
          "plain_text_password",
          "firstname",
          "email"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Username for PowerDNS Admin (must be unique)",
            "example": "testuser1754424578"
          },
          "plain_text_password": {
            "type": "string",
            "description": "Plain text password for PowerDNS Admin user",
            "example": "36440b7d5ab7521f"
          },
          "firstname": {
            "type": "string",
            "description": "First name",
            "example": "Test"
          },
          "lastname": {
            "type": "string",
            "description": "Last name",
            "example": "User"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address",
            "example": "test@example.com"
          },
          "role": {
            "type": "object",
            "description": "User role object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Role ID (2 = User, 1 = Admin)",
                "example": 2
              },
              "name": {
                "type": "string",
                "description": "Role name",
                "example": "User"
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "ip_addresses": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "ipv4 | ipv6"
            },
            "description": "List of IP addresses (IPv4/IPv6, local storage only)",
            "example": [
              "192.168.1.100",
              "2001:db8::1"
            ]
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer ID for business relationships",
            "example": 1001
          }
        }
      },
      "AccountIdentifier": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "Account ID",
                "example": 94
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "username"
            ],
            "properties": {
              "username": {
                "type": "string",
                "description": "Account username",
                "example": "johndoe"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Account identifier object (either ID or username, not both)"
      },
      "AccountUpdateRequest": {
        "type": "object",
        "oneOf": [
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "Account ID",
                    "example": 94
                  }
                }
              },
              {
                "$ref": "#/components/schemas/AccountUpdate"
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "username"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Account username",
                    "example": "johndoe"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/AccountUpdate"
              }
            ]
          }
        ],
        "description": "Account update request with identifier and update fields"
      },
      "AccountUpdate": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string",
            "description": "First name"
          },
          "lastname": {
            "type": "string",
            "description": "Last name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address"
          },
          "role_id": {
            "type": "integer",
            "description": "Role ID"
          },
          "ip_addresses": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "ipv4 | ipv6"
            },
            "description": "List of IP addresses (IPv4/IPv6)"
          },
          "customer_id": {
            "type": "integer",
            "nullable": true,
            "description": "Customer ID"
          }
        }
      },
      "Domain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Domain ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Domain name",
            "example": "example.com."
          },
          "type": {
            "type": "string",
            "description": "Domain type",
            "example": "Zone"
          },
          "account_id": {
            "type": "integer",
            "nullable": true,
            "description": "Associated account ID",
            "example": 1
          },
          "account_name": {
            "type": "string",
            "nullable": true,
            "description": "Associated account name",
            "example": "customer-account"
          },
          "pdns_zone_id": {
            "type": "string",
            "description": "PDNSAdmin zone ID",
            "example": "example.com."
          },
          "kind": {
            "type": "string",
            "enum": [
              "Native",
              "Master",
              "Slave"
            ],
            "description": "Zone kind",
            "example": "Master"
          },
          "masters": {
            "type": "string",
            "description": "Comma-separated list of master servers",
            "example": "192.168.1.100,192.168.1.101"
          },
          "dnssec": {
            "type": "boolean",
            "description": "DNSSEC enabled",
            "example": false
          },
          "account": {
            "type": "string",
            "description": "Account name from PDNSAdmin",
            "example": "customer-account"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "DomainUpdate": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "integer",
            "nullable": true,
            "description": "Account ID to assign domain to (null to remove)"
          },
          "kind": {
            "type": "string",
            "enum": [
              "Native",
              "Master",
              "Slave"
            ],
            "description": "Zone kind"
          },
          "masters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of master servers"
          },
          "dnssec": {
            "type": "boolean",
            "description": "Enable DNSSEC"
          }
        }
      },
      "DomainAccountAdd": {
        "type": "object",
        "required": [
          "domain_name",
          "account_id"
        ],
        "properties": {
          "domain_name": {
            "type": "string",
            "description": "Domain name to add to account",
            "example": "example.com."
          },
          "account_id": {
            "type": "integer",
            "description": "Account ID",
            "example": 1
          }
        }
      },
      "DomainAccountRemove": {
        "type": "object",
        "required": [
          "domain_name"
        ],
        "properties": {
          "domain_name": {
            "type": "string",
            "description": "Domain name to remove from account",
            "example": "example.com."
          }
        }
      },
      "DomainAccountList": {
        "type": "object",
        "required": [
          "account_id"
        ],
        "properties": {
          "account_id": {
            "type": "integer",
            "description": "Account ID to list domains for",
            "example": 1
          }
        }
      },
      "AccountDomainsList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "account": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              },
              "domains": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Domain"
                }
              },
              "domain_count": {
                "type": "integer"
              }
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ApiStatus": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "api_version": {
                "type": "string",
                "example": "1.0.0"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "endpoints": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "example": {
                  "accounts": "/api/accounts",
                  "domains": "/api/domains",
                  "status": "/api/status"
                }
              },
              "pdns_admin_status": {
                "type": "string",
                "enum": [
                  "connected",
                  "disconnected"
                ]
              },
              "database_status": {
                "type": "string",
                "enum": [
                  "connected",
                  "disconnected"
                ]
              }
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ConnectionTest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "connected",
                  "disconnected"
                ]
              },
              "pdns_domains_count": {
                "type": "integer"
              }
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "SyncResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "accounts": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "count": {
                    "type": "integer"
                  }
                }
              },
              "domains": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "count": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "HealthCheck": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "database": {
                "type": "string",
                "enum": [
                  "connected",
                  "disconnected",
                  "unknown"
                ]
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "version": {
                "type": "string"
              },
              "local_accounts_count": {
                "type": "integer"
              },
              "local_domains_count": {
                "type": "integer"
              }
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ApiDocumentation": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "endpoints": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "example": {
                  "accounts": "/api/accounts",
                  "domains": "/api/domains",
                  "status": "/api/status"
                }
              },
              "setup_instructions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "SuccessMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Operation completed successfully"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message",
            "example": "Invalid request data"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Detailed error messages"
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request - Invalid input data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": "Invalid request data",
              "errors": [
                "Name is required",
                "Email format is invalid"
              ]
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": "Resource not found"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict - Resource already exists",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": "Account already exists"
            }
          }
        }
      },
      "ServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": "Internal server error"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Documentation",
      "description": "API documentation and information"
    },
    {
      "name": "Accounts",
      "description": "Account management operations with IP address support"
    },
    {
      "name": "Domains",
      "description": "Domain management operations (creation and updates only)"
    },
    {
      "name": "Domain-Account",
      "description": "Domain-account relationship management"
    },
    {
      "name": "Status",
      "description": "API status, health checks, and synchronization"
    }
  ]
}