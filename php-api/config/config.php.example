<?php
/**
 * API Configuration Example
 * Copy this file to config.php and update with your actual values
 */

// PDNSAdmin API configuration
$pdns_config = [
    'base_url' => 'https://your-pdnsadmin-server.com/api/v1', // Your PDNSAdmin API URL
    'auth_type' => 'apikey', // 'basic' for username:password or 'apikey' for base64 encoded credentials
    'api_key' => 'YOUR_BASE64_ENCODED_CREDENTIALS_HERE' // Base64 encoded username:password (e.g., base64_encode('admin:password'))
];

// Alternative configuration for basic auth (less secure - plain text)
/*
$pdns_config = [
    'base_url' => 'https://your-pdnsadmin-server.com/api/v1',
    'auth_type' => 'basic',
    'username' => 'your-username',
    'password' => 'your-password'
];
*/

// API Response helper functions
function sendResponse($status_code, $data = null, $message = null) {
    http_response_code($status_code);
    header('Content-Type: application/json');
    
    $response = [];
    if ($message) $response['message'] = $message;
    if ($data !== null) $response['data'] = $data;
    
    echo json_encode($response);
    exit;
}

function sendError($status_code, $message, $errors = null) {
    http_response_code($status_code);
    header('Content-Type: application/json');
    
    $response = ['error' => $message];
    if ($errors) $response['errors'] = $errors;
    
    echo json_encode($response);
    exit;
}

// CORS headers
header("Access-Control-Allow-Origin: *");
header("Content-Type: application/json; charset=UTF-8");
header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");

// Handle preflight OPTIONS request
if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {
    exit(0);
}

/*
Instructions for setup:
1. Copy this file to config.php: cp config.php.example config.php
2. Update the PDNSAdmin URL in 'base_url'
3. For secure setup (recommended):
   - Encode your credentials: echo -n 'username:password' | base64
   - Use the output in 'api_key' field
   - Set 'auth_type' to 'apikey'
4. For basic setup (less secure):
   - Uncomment the alternative configuration block
   - Set your username and password directly
   - Set 'auth_type' to 'basic'
*/
?>
    }
}

function isHTTPS() {
    return (
        (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ||
        (!empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https') ||
        (!empty($_SERVER['HTTP_X_FORWARDED_SSL']) && $_SERVER['HTTP_X_FORWARDED_SSL'] === 'on') ||
        (!empty($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] == 443)
    );
}

function addSecurityHeaders() {
    global $api_settings;
    
    if (isHTTPS() && $api_settings['hsts_max_age'] > 0) {
        header('Strict-Transport-Security: max-age=' . $api_settings['hsts_max_age'] . '; includeSubDomains; preload');
    }
    
    header('X-Frame-Options: SAMEORIGIN');
    header('X-XSS-Protection: 1; mode=block');
    header('X-Content-Type-Options: nosniff');
    header('Referrer-Policy: strict-origin-when-cross-origin');
    header('Content-Security-Policy: default-src \'self\'; script-src \'self\' \'unsafe-inline\' unpkg.com; style-src \'self\' \'unsafe-inline\' unpkg.com; img-src \'self\' data:; connect-src \'self\'');
    header('Permissions-Policy: geolocation=(), microphone=(), camera=()');
}

// Helper functions
function sendResponse($status, $data, $message = '') {
    http_response_code($status);
    header('Content-Type: application/json');
    
    // Add security headers
    addSecurityHeaders();
    
    // Enable CORS if configured
    global $api_settings;
    if ($api_settings['enable_cors']) {
        header('Access-Control-Allow-Origin: ' . implode(', ', $api_settings['cors_origins']));
        header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
        header('Access-Control-Allow-Headers: Content-Type, Authorization, X-API-Key');
    }
    
    $response = [
        'status' => $status,
        'data' => $data
    ];
    
    if ($message) {
        $response['message'] = $message;
    }
    
    echo json_encode($response, JSON_PRETTY_PRINT);
    exit;
}

function sendError($status, $message, $details = null) {
    http_response_code($status);
    header('Content-Type: application/json');
    
    // Add security headers
    addSecurityHeaders();
    
    // Enable CORS if configured
    global $api_settings;
    if ($api_settings['enable_cors']) {
        header('Access-Control-Allow-Origin: ' . implode(', ', $api_settings['cors_origins']));
        header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
        header('Access-Control-Allow-Headers: Content-Type, Authorization, X-API-Key');
    }
    
    $response = [
        'status' => $status,
        'error' => $message
    ];
    
    if ($details) {
        $response['details'] = $details;
    }
    
    echo json_encode($response, JSON_PRETTY_PRINT);
    exit;
}

// Handle OPTIONS requests for CORS
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    if ($api_settings['enable_cors']) {
        header('Access-Control-Allow-Origin: ' . implode(', ', $api_settings['cors_origins']));
        header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
        header('Access-Control-Allow-Headers: Content-Type, Authorization, X-API-Key');
        header('Access-Control-Max-Age: 86400');
    }
    http_response_code(200);
    exit;
}

// API Key Authentication Functions
function validateApiKey() {
    global $api_settings;
    
    // Skip authentication if disabled
    if (!$api_settings['require_api_key']) {
        return true;
    }
    
    // Get current endpoint path
    $request_uri = $_SERVER['REQUEST_URI'];
    $path = parse_url($request_uri, PHP_URL_PATH);
    $path = trim($path, '/');
    
    // Remove base path if exists
    $base_path = 'php-api';
    if (strpos($path, $base_path) === 0) {
        $path = substr($path, strlen($base_path));
        $path = trim($path, '/');
    }
    
    // Check if endpoint is exempt from authentication
    if (in_array($path, $api_settings['exempt_endpoints'])) {
        return true;
    }
    
    // Get API key from headers
    $api_key = null;
    
    // Check X-API-Key header
    if (isset($_SERVER['HTTP_X_API_KEY'])) {
        $api_key = $_SERVER['HTTP_X_API_KEY'];
    }
    // Check Authorization header (Bearer token)
    elseif (isset($_SERVER['HTTP_AUTHORIZATION'])) {
        $auth_header = $_SERVER['HTTP_AUTHORIZATION'];
        if (preg_match('/Bearer\s+(.*)$/i', $auth_header, $matches)) {
            $api_key = $matches[1];
        }
    }
    // Check query parameter (less secure, for development only)
    elseif (isset($_GET['api_key'])) {
        $api_key = $_GET['api_key'];
    }
    
    // Validate the API key
    if (!$api_key || !isset($api_settings['api_keys'][$api_key])) {
        return false;
    }
    
    return true;
}

function requireApiKey() {
    if (!validateApiKey()) {
        sendError(401, 'Unauthorized: Valid API key required', [
            'authentication_methods' => [
                'X-API-Key header' => 'X-API-Key: your-api-key',
                'Authorization header' => 'Authorization: Bearer your-api-key',
                'Query parameter (dev only)' => '?api_key=your-api-key'
            ],
            'documentation' => 'See /docs for API documentation'
        ]);
    }
}

function getCurrentApiKey() {
    global $api_settings;
    
    $api_key = null;
    
    // Check X-API-Key header
    if (isset($_SERVER['HTTP_X_API_KEY'])) {
        $api_key = $_SERVER['HTTP_X_API_KEY'];
    }
    // Check Authorization header
    elseif (isset($_SERVER['HTTP_AUTHORIZATION'])) {
        $auth_header = $_SERVER['HTTP_AUTHORIZATION'];
        if (preg_match('/Bearer\s+(.*)$/i', $auth_header, $matches)) {
            $api_key = $matches[1];
        }
    }
    // Check query parameter
    elseif (isset($_GET['api_key'])) {
        $api_key = $_GET['api_key'];
    }
    
    if ($api_key && isset($api_settings['api_keys'][$api_key])) {
        return [
            'key' => $api_key,
            'description' => $api_settings['api_keys'][$api_key]
        ];
    }
    
    return null;
}

function logApiRequest($endpoint, $method, $status_code) {
    global $api_settings;
    
    if ($api_settings['debug_mode'] || $api_settings['log_level'] === 'DEBUG') {
        $api_key_info = getCurrentApiKey();
        $log_entry = [
            'timestamp' => date('Y-m-d H:i:s'),
            'endpoint' => $endpoint,
            'method' => $method,
            'status_code' => $status_code,
            'api_key_used' => $api_key_info ? $api_key_info['description'] : 'None',
            'ip_address' => $_SERVER['REMOTE_ADDR'] ?? 'Unknown'
        ];
        
        // Log to error_log or custom log file
        error_log('API Request: ' . json_encode($log_entry));
    }
}
?>
